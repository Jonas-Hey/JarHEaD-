== Building solutions ==

The fluidOps Platform SDK defines best practices and guides in a ''Solution Development Process'', which is presented in detail in the following. This process includes 

* setting up a solution project in Eclipse
* the general solution structure
* development of the solution
* to build and deploy the solution
* options for collaboration

=== Setting up a solution project in Eclipse ===

The following guide assumes that 


a) you have a locally installed version of the fluidOps platform (i.e., the {{PRODUCT}}),<br/>
b) it has already been started at least once<br/>
c) the development IDE Eclipse is available in a recent version<br/>
d) the installed application is only used for a single solution project<br/>


<br/>
1) Run the SDK setup script ''setup.cmd/sh'' contained in the distribution in the application working directory (i.e., fiwb/sdk/* or fecm/sdk/*)

<img src="../images/help/SDK/SDK-setup.png" />

Once you have entered a valid solution path in your workspace (e.g., ''c:\path\to\workspace\MyProject''), the following actions are performed:

* A backup of the existing application configuration and data is created to ''backup-workingset'' in the application working directory
* An Eclipse solution project is created, containing the predefined solution structure, build scripts and launch configurations

2) Run your local Eclipse, and import the just created project into your workspace (File => Import => General => Existing Projects into Workspace).

<br/>

<img src="../images/help/SDK/SDK-Eclipse-Import.png" />

<br/>

<img src="../images/help/SDK/SDK-Eclipse-Import2.png" />

3) The project is imported and a project structure as illustrated below is shown

<img src="../images/help/SDK/SDK-Eclipse-ProjectStructure.png" />

The project contains the basic solution structure, a pre-configured classpath using the resources from the actual installation, a launch configuration to start the application from Eclipse (with the solution), as well as scripts for performing certain actions (build, clean, ...). The actual actions are explained in more details below.

Please find further details about the solution structure in section ''Solution Structure'' below.


=== Solution structure ===

The general solution structure is as follows.

* '''resources''': additional non-compiled resources on the classpath (e.g. string templates)
* '''src''': additional Java sources, e.g. custom widgets or providers
*''' test''': JUnit tests for sources in src folder
* '''config''': general system configuration, including images, widgets, namespaces, providers, tasks, data sources
* '''data''': custom data and wiki pages for bootstrap
** '''dbBootstrap''': RDF files that are loaded at startup
** '''ontologies''': use-case specific ontologies (*.owl in RDF/XML format)
** '''wikiBootstrap''': wiki pages in plain text, one file for every page (URL encoded URI of the resource)
* '''lib'''
** '''extensions''': contains additional libraries
* '''scripts''': location for groovy scripts

Please see e.g. [[Help:SystemConfiguration]], [[Help:SDK-SystemConfiguration]], [[Help:SDK-Bootstrap]], [[Help:WidgetSDK]] or [[Help:ProviderSDK]] for details.


=== Development of the solution ===

Having performed the previous steps, the actual solution development can start. In the following we give some general hints for the solution development process, and the point to the respective detail pages.

==== Wiki pages and templates ====

[[Help:Wiki|Wiki pages]] (and wiki page templates) are key elements to form the user interface of the application. For solution development, we recommend the following best practices:

# Start the application from Eclipse (Start_%ProjName%.launch)
# In the browser, navigate to the applications page (e.g., <nowiki>https://localhost:50443/</nowiki> for the {{PRODUCT}})
# Create or modify the desired wiki pages (see [[Help:Wiki]] for details)
# Stop the application from Eclipse
# Run the ''Copy Modified Wiki Pages To Workspace'' launch configuration
# The workspace is refreshed, and all user edited pages are copied to ''data/wikiBootstrap'' in your solution project
# Optionally, run the ''Remove User-Edited Wiki Pages From System'' launch configuration, which removes all user edits from the system. Note: at next startup of the solution the pages are boostrapped from the solution project again.

Please refer to [[Help:SDK-Bootstrap]] for further details.

Hint: the [[Help:WikiManagement| wiki management]] facility can be used to see all user edited pages in a running system.

<img src="../images/help/SDK/SDK-editedWikiPages.png" />

==== Bootstrapping data and ontologies ====
Solutions can be bootstrapped with ontologies and data.

For creating and editing the ontologies, we recommend using a dedicated ontology editor such as [http://protege.stanford.edu Protege].
It is best practice to directly edit the ontologies in the '''data/ontologies''' folder of the solution.

From a running application/solution, you can also export the deployed ontologies for editing with external tools.
Under [[owl:Ontology]] you find a list of ontologies currently deployed in the system.
When selecting a specific ontology, you will find a link ''Export ontology'' that provides a URL to the ontology in the system.
Using this URL, you can directly open the ontology from tools such as Protege via the ''Open from URL...'' dialog.

Please refer to [[Help:SDK-Bootstrap]] for further details.

==== System configuration ====

It is possible to define system configuration parameters (namespaces, configuration settings, ACLs, ...) in a solution. These are applied at installation time. 

For the development process it is recommended to perform all system configuration settings of a solution directly in the Eclipse solution project.

Please refer to [[Help:SDK-SystemConfiguration]] for further details.

==== Java Source and Scripts ====

The solution infrastructure allows to provide custom source as part of the solution. This can either be Java source code (placed in ''src'' folder) or Groovy scripts (placed in ''scripts'' folder). Both, additional Java source and the scripts are automatically on the classpath, when running the application from Eclipse. Note: although changes to the source may be hot-swapped into the JVM, we recommend a restart of the application for changes to take effect.

See the following additional items for typical source extension points:

* [[Help:WidgetSDK]]
* [[Help:ProviderSDK]]
* [[Help:APIExtensions]]
* [[Help:ValueResolverExtensions]]
* [[Help:CodeExecution]]


=== Build and deployment ===

The development process brings a set of predefined ANT build scripts, which can be run to create a reusable artifact for your solution. The build process can be triggered with the ''Build Solution Artifact'' launch configuration. Once, the build is done, the ''artifacts'' folder contains a file ''MySolution.zip''.

This solution artifact can be installed into any compatible version of the fluidOps Platform using the deployment process as described in [[Help:Apps]].

=== Version Control ===

Solution development can be done collaboratively by using SVN (or other concepts) as version control system for the solution project. 
This allows project teams to work on a project collaboratively and to implement reviews and code quality
standards. 

=== Development and deployment best practice ===

When an app or solution is used by a large number of users in a productive environment,
our recommendation is to work with a productive system and one or more staging / development systems.
Structural changes to the app should not be performed on the production system. This includes ontology
updates, changes to workflows, etc. Instead, we recommend developing and testing these changes
on the staging systems, where they can be put under version control, tested, and reviewed.
Once a change is approved, the corresponding app artifact (e.g. MySolution.zip) can be deployed
onto the production system(s).

This methodology makes sure that:

* all production systems (cluster members, portals, etc.) run the same software version
* app changes to production systems happen in a controlled and auditable fashion
* only tested and approved changes happen in production
* changes are installed on production with zero downtime

Note that it is also possible to split more complex apps into multiple deployment artifacts.
For instance, in a setup with a portal and a backend system, it might make sense to have a common
app which contains ontologies and code. In addition, there can be a portal and a backend app,
which extend the common core with settings that are specific for the respective tier.
The portal app might contain a certain set of wiki pages, while the backend contains data sources,
mappings and provider settings.

=== Extracting assets from a development system into the eclipse SDK ===

This section explains how various parts of an app can be extracted from a development system,
in order to put them under version control and deploy them in a repeatable fashion to other systems.
We distinguish between the platform installation directory (called platform/...) and the
sdk directory managed by eclipse (called sdk/...).

==== Compilation artifacts ====
* '''Java code''': code is available in ''sdk/src''. It gets compiled into an ''app.jar'' file.
* '''resources''': resources such as string templates and other assets to be loaded via the Java classloader are treated like Java code and reside in ''sdk/resources''.
* '''groovy scripts''': are treated like java code and can reside in ''sdk/scripts''.
* '''other scripts''': scripts are located under the ''platform/scripts'' folder and need to be moved from the platform installation directory to the ''sdk/scripts'' folder.

==== Data ====
* '''wiki pages''': are located under ''platform/data/wiki'' and can need to be copied to ''sdk/data/wikiBootstrap'' either by manually exporting them from [[Admin:WikiManagement]] (see Help:WikiManagement for details) or by leveraging the ''copy modified wiki pages'' build script in Eclipse.
* '''uploaded files''': are located in platform/data/upload and need to be copied to ''sdk/data/upload''.
* '''R2RML mappings''': are stored in the default RDF database. They can be exported on the mapping collection page in form of a serialized RDF file. This file can be placed under ''sdk/data/dbBootstrap''.
* '''Ontologies''': are also stored in the default RDF database and can be managed on the page owl:Ontology. Ontologies can also be downloaded from there. To add them to an app, copy them into the folder sdk/data/ontologies.
* '''Query catalog''': is also stored in the default RDF database. It can be exported on the page sp:Query. The resulting RDF file can be placed under sdk/data/dbBootstrap.
* '''Other data''': is also stored in the default RDF database. It can be identified by context and exported selectively on the page [[Admin:ContentOverview]] (i.e. by selecting all contexts representing user edits). The resulting RDF file can be placed under ''sdk/data/dbBootstrap''.

==== Configuration ====
* '''config settings''': are written to ''platform/config.prop''. The relevant lines need to be copied to ''sdk/config.prop'' (or if programmatic access is required using a well-defined DSL to ''config.groovy'').
* '''namespace declarations''': are written to ''platform/config/namespaces.prop''. The relevant new namespaces need to be copied to ''sdk/config/namespaces.prop''. See [[Help:SDK-SystemConfiguration| here]] for details.
* '''value resolver image definitions''': are kept in ''platform/config/images.prop'' and need to be copied to ''sdk/config/images.prop''.
* '''pre-defined data sources''': are defined in sdk/config/datasources.xml. The platform datasource definition that you'd like to be part of the app are located in ''platform/config/datasources-user.xml''. Copy the relevant entries to the sdk file.
* '''pre-defined providers''': are treated like data sources. The relevant file name is providers(-user).xml. See [[Help:SDK-SystemConfiguration#Custom_providers_and_provider_configurations| here]] for details.
* '''pre-defined tasks''': are treated like data sources. The relevant file name is tasks(-user).xml.
* '''RDF repositories''': can be defined under [[Admin:RepositoryManagement]] (see [[Help:RepositoryManagement]] for details). The settings are serialized in ''platform/config/repositories/instances'' and must be copied to ''sdk/config/repositories/instances''.
* '''Role mappings''': that are done via the share UI are stored in ''platform/config/rolemappings-user.xml''. Copy the relevant entries to ''sdk/config/rolemappings.xml''.

See [[Help:SDK-SystemConfiguration]] for details on configuration possibilities.

==== Extensions ====
* '''additional web resources''' such as CSS / HTML: are located in ''platform/webapps/ROOT'' and need to be copied to ''sdk/webapps/ROOT''.
* '''ACL definitions''': are kept in ''platform/config/acl/extensions'' and need to be copied to ''sdk/config/acl''.
* '''provider and widget declarations''': are treated like namespaces, the file names are widgets.prop and providers.prop respectively.


