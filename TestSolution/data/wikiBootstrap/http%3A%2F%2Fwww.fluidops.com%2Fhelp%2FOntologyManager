== Ontology Manager ==

Depending on the use-case, ontologies may vary in their expressivity and can serve different purposes. 
Ontologies are an essential part of any semantic data integration process and serve as a structural backbone for data driven applications built ontop of the {{PRODUCT}}.
<div style="margin-left:30px">
<img src="../images/help/OntologyOverview.png" />
</div>
=== Ontology Download ===
Ontologies can be easily downloaded to file using different serialization formats. The download button at the end of each row in the table of known ontologies will open a pop-up to select the preferred seralization format. After selecting the format, the exported ontology will be offered as file download.
RDF/XML is recommended as format for loading the ontology in any external ontology editor as, for example, [http://protege.stanford.edu/ Protege] .

=== Ontology Deletion ===
Ontologies can be removed from the repository using the delete button at the end of each row in the table of known ontologies.

=== Ontology Import ===
Since most OWL ontologies are being serialized as RDF documents, they can be loaded into the system using different mechanisms:
* [[Help:SDK-Bootstrap#Ontology_bootstrap|Ontology SDK Bootstrap]]
* [[Help:OntologyManager|Ontology Import]]
* [[Help:RDFImport|RDF Import]]
* [[Help:Providers#Data_Provider_Concept|Data Provider]]

Note that '''it is not recommended to use the RDF Import or Data Provider mechanism''' for importing ontologies, since ontologies require special handling. <br/>

'''The recommended way for storing ontologies in the platform''' is to use the [[owl:Ontology | ontology import widget ]], while apps can bring their own pre-packaged ontology using the [[Help:SDK-Bootstrap#Ontology_bootstrap|Ontology SDK Bootstrap]] mechanism.
<div style="margin-left:30px">
<img src="../images/help/OntologyImportWidget.png" />
</div>
Each ontology document to be uploaded MUST contain a statement "subject rdf:type owl:Ontology" where the subject corresponds to the ''ontologyIRI''. The owl:ontologyIRI property itself will not be considered.

==== Ontology Identity and Versioning ====
Each ontology MAY have an optional ''versionIRI'' (using the owl:versionIRI property). However, it is not possible to store the same ontology  with and without an version at the same time. 

Fur further information about OWL versioning please refer to the W3C [http://www.w3.org/TR/owl2-syntax/#Ontology_IRI_and_Version_IRI OWL2 Version IRI] specification.

To summarize:
* an ontology MAY be uniquely identified within the platform by its ''ontologyIRI'' 
* an ontology CAN be uniquely identified within the platform by its ''ontologyIRI'' AND ''versionIRI''
Please note, that:<br/>
<div style="margin-left:50px">
Even though possible, '''it is not generally recommended''' to maintain (store) several versions of the same ontology at the same time within the platform's default repository. The problem is that - even though each ontology is stored in its own context - most queries used, for example, in templates and widgets query the entire repository (i.e. from all contexts combined). Consequently, queries may become inefficient or may result in duplicates. </br>

However, in some use-cases e.g. if the default repository acts as a configuration repository, the ontology manager can be used to maintain (i.e. store and load) different versions of the same ontology from the backend.
</div>
==== Resolve Ontology Imports ====
If  "Resolve and store import closures" is checked while importing an ontology the ontology manager will try to resolve all IRIs from import closures and store each imported ontology in a separate contexts. Please note that imports will be resolved recursively and if used together with "Replace existing ontologies" may possibly override existing ontologies.

==== Overriding Ontologies ====
If "Replace existing ontologies" is checked while importing an ontology the ontology manager will override the ontology with same ontologyIRI and -if required- versionIRI. 