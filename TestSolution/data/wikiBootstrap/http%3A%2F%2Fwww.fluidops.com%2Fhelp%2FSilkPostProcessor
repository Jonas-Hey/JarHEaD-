=== Silk Post Processor ===

We use <a href="http://wifo5-03.informatik.uni-mannheim.de/bizer/silk/" target="_blank">Silk</a> as a post processing backend.
However, a simplified and intuitive rule editor will open when you click on "Post Processor".
In most standard cases, the editor will be sufficient to interlink or merge data.
In more advanced cases, you are free to instead enter an arbitrary Silk configuration.
Please refer to the <a href="http://wifo5-03.informatik.uni-mannheim.de/bizer/silk/" target="_blank">Silk homepage</a> for more information.

==== Example ====

Suppose, you are integrating data about people.
Persons that are already in the system are identified by URIs containing their name for readability, '''e.g., '':Jane_Doe_17'' for one Jane Doe'''.
Data from your additional data source won't usually contain that same ID.
So it will be impossible to simply add new data to the same URI '':Jane_Doe_17''.
Instead, your new data will be added to a '''different URI with some other ID, e.g., '':person07661'', also describing the same Jane Doe.'''
Still, both '':Jane_Doe_17'' and '':person07661'' may share some attached information that effectively allows us to identify them as the same person.
This could be an e-mail address, e.g., ''jane.doe@fluidops.com''.

'''That's where post processing steps in''':
if you could not create the "correct" entity URI to match new data with existing data, '''you can set post processing ''rules'' that merge two different URIs''' describing the same entity.

To do so, open post processing options in your data provider.

<img src="../images/help/DataOps/post_processing_1.png" style="max-width:500px" />

Choose "Merge" for merging new URIs with existing ones.
In our example, this means that the "incorrect" new URI '':person07661'' of Jane Doe will be renamed to the existing one, '':Jane_Doe_17'', before it gets stored into the database.
(Alternatively, you may choose "Link", which will keep both URIs but add an owl:sameAs link between the two, so reasoners would understand that both URIs describe the same person).

<img src="../images/help/DataOps/post_processing_2.png" style="max-width:500px" />

Now, you need to specify the rules that decide when two entities are considered to be the same, e.g., if they '''both are persons that share the same e-mail address'''.

Open the SILK editor to do so.

<img src="../images/help/DataOps/silk_editor.png" style="max-width:500px" />

First, specify which ''existing'' entities in the productive database are to be considered.
We only need to consider persons.
Hence, we ''restrict'' the scope on existing entities on type ''foaf:Person''.
Otherwise, post processing would check each and every entity on the database, irrespective of its type.

Second, specify which ''newly imported'' entities should be checked.
Again, we only need to consider newly imported persons.

Finally, specify how they need to correspond in order to be considered the same.
In our case, the existing person would need to have a property ''foaf:mbox'' (email) that has the same value as property '':email'' in the newly imported instance.
If that's the case, both are considered the same person and their URIs are being merged, leaving only one instance, '':Jane_Doe_17'', that combines all of the data.

Instead of requiring strict equality between the values, you can also just require ''similarity'' with a configurable confidence threshold, e.g., when matching information that may contain minor typos.
You may also add more comparisons that all need to hold at the same time, e.g., if you wish to require ''all'' of a persons name, zip code, street and number to match.