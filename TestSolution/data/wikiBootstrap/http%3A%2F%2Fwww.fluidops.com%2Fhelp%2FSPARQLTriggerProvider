=== SPARQL Trigger Provider ===

==== Functionality ====
{{#widget: com.fluidops.iwb.widget.DisplayConfigurationWidget
| clazz = com.fluidops.iwb.provider.SPARQLTriggerProvider
| type = 'DESCRIPTION'
}}

Go back to [[Help:Providers | Providers ]]
==== Configuration Settings ====

{{#widget: com.fluidops.iwb.widget.DisplayConfigurationWidget
| clazz = com.fluidops.iwb.provider.SPARQLTriggerProvider
}}

==== Functionality ====

The trigger provider is similar to the  [[Help:SPARQLEndpointProvider| SPARQLEndpointProvider]]. The difference is, that the current query result is compared
to the last run of the provider. The trigger provider computes the delta between the two sets of RDF triples, resulting
in a set of new statements and a set of deleted statements. This information is communicated to the trigger modules
which are registered with the provider. The triggers are free to perform any kind of action. SDK developers can
write custom triggers by implementing this interface:

<source>
package com.fluidops.iwb.provider.trigger;

public interface Trigger 
{
	public void onAdd( Collection<Statement> stmts );
	
	public void onDelete( Collection<Statement> stmts );
}
</source>

==== Example ====

The following example queries application monitoring data and constructs events if a misconfiguration is detected.
The trigger sends alert emails to support.

Trigger:
<source>
com.fluidops.iwb.ecm.provider.trigger.EventTrigger
</source>

Query:
<source>
construct 
{
   ?event a :Event .
   ?event event:classification "WARNING" .
   ?event event:category "Application" . 
   ?event event:eventSource ?source .
   ?event event:message "HTTP server unreachable" .
   ?event rdfs:label "HTTP server unreachable" .
   ?event event:rule "httpCheck" .
   ?event event:importanceLevel "300" .
   ?event dc:date ?now .
   ?event event:state "new"; .
   ?event event:isIgnored FALSE .
   ?event event:mailTo "support@example.org"
}
where { 
   ?source systemInstance:status ?status .
   bind ( now() as ?now )
   bind ( uri(concat( str(?source), '/httpCheck')) as ?event )
   filter ( ?status != "200" )
}
</source>
