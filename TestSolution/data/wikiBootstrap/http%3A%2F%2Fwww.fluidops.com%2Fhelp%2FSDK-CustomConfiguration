=== Custom Configuration Settings ===

The {{PRODUCT}} SDK allows to define custom configuration settings that are directly accessible from the [[Help:SystemConfiguration]].

This can be done by implementing a custom config class and registering a ''ConfigClassLocator'' to find the config.


==== Example ====

The following example illustrates how custom configuration settings can be defined.

'''1) Provide the config implementation and the locator'''

For the config implementation the following rules must hold:

* the config class must extend ''com.fluidops.config.DelegateConfig'' or one of its sub-classes (e.g. ''com.fluidops.iwb.util.Config'' or ''com.fluidops.coremgmt.util.Config'')
* the config class must provide a locator, that extends ''com.fluidops.config.ConfigClassLocator''
* it is recommended to use a singleton pattern (as in the example) to manage the instance
* the config class defines config settings as public methods
** using the ''@ConfigDoc'' annotation metadata (such as the description, category or type) can be provided
** it is required to use the ''delegate()'' instance from the super class to access properties. Some convenience methods in the parent class provide easy conversion, e.g. for boolean or numeric properties and allow to specify default values
** the property name as passed to ''delegate().get(name, default)'' and method name should match the entry name in the ''@ConfigDoc'' annotation


<source>
/**
 * Example for a system configuration extension 
 */
public class DemoConfig extends DelegateConfig {

	public static class DemoConfigLocator extends ConfigClassLocator {
		public DemoConfigLocator() {
			super(DemoConfig.class, getConfig());
		}
		
	}

	private static UpdatableSingleton<DemoConfig> config = new UpdatableSingleton<DemoConfig>() {
		@Override
		protected DemoConfig createInstance() throws Exception {
			return new DemoConfig();
		}
	};
	
	public static DemoConfig getConfig() {
		return config.instance();
	}
	
	
	@ConfigDoc(name = "demo.mySetting", 
			desc = "An example for a setting defined by a solution.", 
			category = Category.CORE,
			iwbCategory = IWBCategory.CORE,
			type = Type.STRING)
	public String getMySetting() {
		return delegate().get("demo.mySetting", "The Default Value");
	}
}
</source>

'''2) Register config class'''

The registration is done using the Java service loader mechanism. In ''META-INF/services/com.fluidops.config.ConfigClassLocator'' of your app create an entry for your locator with its fully qualified name:

<source>
com.fluidops.demo.config.DemoConfig$DemoConfigLocator
</source>

Hint: even though Eclipse returns the fully qualified class name with a '.' one has to use '$' as separator for the the simple name for inner static classes