== Repository Configuration ==

The {{PRODUCT}} relies on the Openrdf Sesame framework (see [http://rdf4j.org/ rd4j.org]) and thus allows to use any store compliant to the Sesame SAIL architecture as a repository. Examples include


* Sesame Native Store
* Sesame Memory Store
* Sesame Remote repositories
* Public SPARQL endpoints
* A remote fluidOps Platform instance
* fluidOps Enterprise DB
* fluidOps Scaleout Cluster
* Ontotext GraphDB
* SYSTAP bigdata
* Virtuoso
* MarkLogic
* Oracle Database Semantic Technologies
* Federation with FedX
* Custom repositories

In the following, we describe how the particular repositories can be configured.


=== Sesame Native Store ===

The Sesame Native Store is used as a default repository in the {{PRODUCT}}. RDF data is persisted and written to %IWB_HOME%/data/dbmodel on disk.

Note, that the native store can be explicitly configured by setting '''repositoryType=native''' in config.prop

=== Sesame Memory Store ===

The Sesame Memory Store is an implementation of the Sesame Sail interface that stores its data in main memory and that can use a file for persistent storage. This Sail implementation supports single, isolated transactions.

The memory store can be configured by setting '''repositoryType=memory''' in config.prop.



=== Sesame Remote Repositories and HTTP repositories ===

Repositories deployed in the Sesame workbench can be used in the {{PRODUCT}} using the following configuration in config.prop.

<source>
repositoryType=remoterepository
repositoryServer=http://<HOST>:<PORT>/openrdf-sesame/
repositoryName=<RepositoryName>
</source>

Note that with this mechanism it is easily possible to use a Ontotext GraphDB repository (or any other Sesame triple store) and to achieve scalability.

While the above mechanism uses Sesame's ''RemoteRepositoryManager'' facility, in certain cases it might be required to instantiate a HTTPRepository directly (e.g. when using the Ontotext Workbench). This can be achieved using the following configuration.

<source>
repositoryType=httprepository
repositoryServer=http://<HOST>:<PORT>/openrdf-sesame/
repositoryName=<RepositoryName>
</source>

Sesame remote repositories support HTTP authentication. In the {{PRODUCT}} this can be configured with the following additional properties in config.prop.

<source>
repositoryUser=user
repositoryPassword=password
</source>

=== Public SPARQL Endpoints ===

It is also possible to use public SPARQL endpoints as read-only repositories in the {{PRODUCT}}. This can be achieved with the following configuration in config.prop:

<source>
repositoryType=sparql
endpoint = http://<HOST>/sparql
</source>

Crendentials can be optionally provided with the following settings:

<source>
repositoryUser=user
repositoryPassword=password
</source>

=== A remote fluidOps Platform instance ===

The RDF data of remote instances of the fluidOps platform can be accessed through their SPARQL endpoint. Authentication can be optionally configured using ''repositoryUser'' and ''repositoryPassword'' settings.

We recommend to access data through the Sesame HTTP endpoint for performance reasons. The relevant functionality to expose such HTTP endpoint is provided with the bundled app ''sesame-httpendpoint''. To expose the endpoint this app needs to be installed on the remote fluidOps platform instance. See [[Help:Apps]] for details.

''Note: for setting up a frontend installation, it is recommended to use [[Setup:Portal]] (currently available in eCloudManager only) where the UI guides you through all relevant configuration settings (incl. the repository configuration).''

The client installation can then use the following configuration:

<source>
repositoryType=remoterepository
repositoryServer=https://%hostname%:50443/sparql-http/
repositoryName=default
repositoryUser=admin
repositoryPassword=<PASSWORD>
</source>

In order to configure the ''history'' repository to proxy to a remote fluiOps platform, the following settings can be used:

<source>
historyRepositoryType=remoterepository
historyRepositoryServer=https://%hostname%:50443/sparql-http/
historyRepositoryName=history
historyRepositoryUser=admin
historyRepositoryPassword=<PASSWORD>
</source>

Alternatively, a remote instance can be accessed via its usual SPARQL endpoint:

<source>
repositoryType=sparql
endpoint=https://%hostname%:50443/sparql
</source>

Note: Password may optionally be encrypted using the following platform CLI command:

<source>
> encrypt -password "myPassword"
[crypt:C44AB12DFA536BE7E4B661817F8C5E809361BD259113BE43CBA755883652C8CC1B103ABD53C6C429]
</source>


=== fluidOps Enterprise DB ===

''Note: for this feature the <a href="https://appcenter.fluidops.com/resource/?uri=http%3A%2F%2Fwww.fluidops.com%2Fapplication%2Fedb">Enterprise DB App</a> is required.''

To install the fluidOps enterprise DB, pleasse apply the following configuration:

<source>
# Enable EnterpriseDB as default repository
repositoryType=class=com.fluidops.edb.EnterpriseDBFactory
# Enable federation of PojoView DB (should be enabled for eCloudManager)
enterpriseDBPojoView=false
# set the location of the data storage
enterpriseDBLocation=data/edb
# optional: enable tracing
enterpriseDBTrace=false
</source>

More information on the Enterprise DB can be found on the
<a href="https://appcenter.fluidops.com/resource/?uri=http%3A%2F%2Fwww.fluidops.com%2Fapplication%2Fedb">AppCenter Page</a>
as well as this <a href="https://www.youtube.com/watch?v=PD7WBdetZ1k">demonstration video</a>



=== fluidOps Scaleout Cluster ===

The fluidOps scaleout cluster allows the backend to be run as an
active-active horizontal scaleout cluster. For more information, please
visit [[Help:Scaleout]].


=== Ontotext GraphDB ===

GraphDB is a commercial triple store offered by Ontotext. The simplest way to integrate a GraphDB repository is to deploy it in a Sesame Workbench on a Tomcat application server and to use it as remote repository as described above. This can be achieved with the following configuration in config.prop: 

<source>
repositoryType=remoterepository
repositoryServer=http://<HOST>:<PORT>/openrdf-sesame/
repositoryName=<RepositoryName>
</source>

Please refer to the [http://www.ontotext.com/semantic-resources/#documents GraphDB documentation] for details about installations. 

=== SYSTAP bigdata ===

Bigdata is a commercial triple store offered by SYSTAP. The bigdata repository can be integrated with the {{PRODUCT}} in several ways:

* as a Sesame remote repository on a Tomcat application server. 
* as a SPARQL endpoint of a Sesame repository.
* as a SPARQL endpoint of the SYSTAP nanoSparqlServer.


Using bigdata as a Sesame remote repository can be achieved with the following configuration in config.prop: 

<source>
repositoryType=remoterepository
repositoryServer=http://<HOST>:<PORT>/openrdf-sesame/
repositoryName=<RepositoryName>
</source>

If you want to use bigdata as a SPARQL endpoint of the Sesame repository you can use the configuration:

<source>
repositoryType=sparql
endpoint = http://<HOST>:<PORT>/openrdf-sesame/repositories/<RepositoryName>
</source>

As a third option you can refer to the SPARQL endpoint if the SYSTAP nanoSparqlServer:

<source>
repositoryType=sparql
endpoint = http://<HOST>:<PORT>/sparql
</source>


For any of the three possibilities please refer to the [http://sourceforge.net/apps/mediawiki/bigdata bigdata documentation] for details about installations. 

=== Virtuoso triple store ===

To access a [http://virtuoso.openlinksw.com/ Openlink Virtuoso] triple store the platform platform provides an add-on app that can be retrieved from the [http://appcenter.fluidops.net/resource/?uri=http%3A%2F%2Fwww.fluidops.com%2Fapplication%2Fvirtuoso-bridge fluidOps App Center]. Alternatively, for simple read-only access the SPARQL endpoint configuration can be used.

For detailed documentation and setup instructions see [[Help:Virtuoso]] in a system where this app is installed.

=== MarkLogic triple store ===

To access a MarkLogic triple store the platform platform provides an add-on app that can be retrieved from the [http://appcenter.fluidops.net/resource/?uri=http%3A%2F%2Fwww.fluidops.com%2Fapplication%2Fmarklogic-bridge fluidOps App Center].

For detailed documentation and setup instructions see [[Help:MarkLogic]] in a system where this app is installed.

=== Oracle Database Semantic Technologies ===

The {{PRODUCT}} allows using Oracle Database Semantic Technologies as a read-only repository. We recommend setting up a SPARQL endpoint for Oracle, please see the [http://docs.oracle.com/cd/E11882_01/appdev.112/e25609/sem_jena.htm Developer's Guide] for further instructions. Once the endpoint is running, it can be accessed using the following configuration:

<source>
repositoryType=oracle
endpoint=http://<HOST>:<PORT>/joseki/oracle
</source>

To load data into the repository, follow the instructions in [http://docs.oracle.com/cd/E11882_01/appdev.112/e25609/sdo_rdf_concepts.htm#sthref161 section 1.7] of the Oracle Database Semantic Technologies Developer's Guide.




=== Federation with FedX ===

The {{PRODUCT}} can integrate [http://www.fluidops.com/FedX/ FedX] as a backing repository to achieve federation of multiple (remote) RDF data sources. Details on the configuration are presented [[Help:FedX| here]]

=== Using Custom Repositories ===

In addition to the predefined configurations the {{PRODUCT}} allows to integrate custom Sesame repositories (e.g. to perform some initialization). This can be achieved as illustrated in the following example:

<source>
repositoryType = class=com.my.package.MyRepositoryFactory
</source>

where ''MyRepositoryFactory'' extends '''com.fluidops.iwb.util.RepositoryFactoryBase'''

e.g. a Sesame Memory Store with RDFS inferencing support

<source>
public class InferencingMemoryRepositoryFactory extends RepositoryFactoryBase {

	@Override
	public Repository loadRepository() throws Exception {		
		return  new SailRepository(new ForwardChainingRDFSInferencer(new MemoryStore()));
	}

}
</source>
