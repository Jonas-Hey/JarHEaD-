=== SPARQL Post Processor ===

{{PRODUCT}} ships a post processor for modifying the result of a provider using a SPARQL CONSTRUCT or UPDATE query:

* '''UPDATE''': modifies the contents of the temporary repository. 
Note: the query will only "see" the provider results. To access other statements in the repository, use the SERVICE keyword together with System:default for the main repository.
* '''CONSTRUCT''': transforms the results (e.g. schema transformation or URI rewriting) and keep only statements produced by the query (i.e., the original provider results are discarded)
<br/>
'''Examples:'''

For the examples below we consider the following input statements produced by the [[Help:Providers| provider]]:

<source>
:joe rdf:type foaf:Person .
:joe foaf:firstname "Joe" .
:joe foaf:lastname "Smith" .
</source>


'''a) Transformation using a CONSTRUCT query'''

When using a CONSTRUCT query, the results of the provider run can be modified. 

Consider the following example query:

<source>
CONSTRUCT {
  ?person a foaf:Agent . 
  ?person rdfs:label ?name.
} WHERE {
  ?person a foaf:Person. 
  ?person foaf:firstname ?firstname. 
  ?person foaf:lastname ?lastname. "BIND(concat(?lastname,', ',?firstname) as ?name).
}
</source>

Here we do a schema transformation on the input data. The resulting model after the post processor run would be

<source>
:joe rdfs:label "Smith, Joe" .
:joe rdf:type foaf:Agent .
</source>

Note that it is possible to filter the results of a provider run using this method.

'''b) Modifying the input statements using a UPDATE query'''

With an UPDATE query (i.e., INSERT or DELETE) it is possible to modify the existing statements.

With the following INSERT query example, an additional statement is added to the result model, which associates an ''rdfs:label'' to the person:

<source>
INSERT {
  ?person rdfs:label ?name.
} WHERE {
  ?person a foaf:Person . 
  ?person foaf:firstname ?firstname . 
  ?person foaf:lastname ?lastname .
  BIND(concat(?lastname,', ',?firstname) as ?name).
}
</source>

The initial source triples will be complemented with the following statement:

<source>
:joe rdfs:label "Smith, Joe" .
</source>

Finally, with the following DELETE query, the ''foaf:firstname'' statement is removed from the result model:

<source>
DELETE {
  ?person foaf:firstname ?firstname . 
} WHERE {
  ?person foaf:firstname ?firstname
}
</source>

The resulting statements would be:

<source>
:joe rdf:type foaf:Person .
:joe foaf:lastname "Smith" .
</source>

'''c) URI rewriting including repository lookup'''

Another use case is the rewriting of data (e.g. subjects) by using repository lookups.

Consider a provider that produces the following statements

<source>
:joe-smith foaf:firstname "Joe" .
:joe-smith foaf:lastname "Smith" .
:joe-smith foaf:mbox "joe.smith@example.com" .
</source>

In the repository the following information already exists:

<source>
:joe rdf:type foaf:Person .
:joe rdfs:label "Joe Smith" .
:joe foaf:mbox "joe.smith@example.com" .
</source>

The goal of our example now is to rewrite the subject URI generated by the provider. For this we can match the existing instance via the ''foaf:mbox'' property.

Note: for this we can use the ''SERVICE'' keyword in order to reference one of the platform's repositories, see [[Help:RepositoryManagement#Accessing_repositories_with_the_SERVICE_keyword| here for details]].

<source>
CONSTRUCT {
  ?person foaf:firstname ?firstname .
  ?person foaf:lastname ?lastname 
} WHERE {
 ?person_import a foaf:Person. 
 ?person_import foaf:firstname ?firstname. 
 ?person_import foaf:lastname ?lastname . 
 ?person_import foaf:mbox ?mbox . 
 SERVICE System:default { ?person foaf:mbox ?mbox }
}
</source>

The resulting statements of the provider run would be.

<source>
:joe foaf:firstname "Joe" .
:joe foaf:lastname "Smith" .
</source>

Note that these are attached as additional information to the existing resource '':joe'' by rewriting.