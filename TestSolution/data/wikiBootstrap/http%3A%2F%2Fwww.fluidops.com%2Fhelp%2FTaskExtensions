== Task extensions ==

The [[Help:Tasks | Task Framework]] is designed with extensibility in mind, i.e., it is easily possible to register custom tasks. Below, we describe in detail how custom value resolvers can be added to the platform using the following steps.

# Implement the custom task as a Java class
# Register your task


=== Implementation of the task ===

The task itself is a Java class exposing its functionality through public functions as defined in the abstract ''AbstractTask'' class. Hence, the first step is to create a new Java class which extends from ''com.fluidops.iwb.concurrent.AbstractTask''.

Consider the ''ActionOnEvent'' example below as illustration.

<source>
/**
 * Example task which suspends a virtual machine
 * The first generic type is the usual task configuration object (i.e. which parameters are to be set via the task UI),
 * the second generic parameter is the return value yielded by the task implementation. In this case it is
 * Void, i.e. no value is being returned. 
 */
@TypeConfigDoc("Task to be called upon new events")
public class ActionOnEvent extends AbstractTask<ActionOnEvent.Config, Void>
{
	private static final long serialVersionUID = 8598087268010080963L;

	public static class Config implements Serializable
	{
		private static final long serialVersionUID = 637764320072039108L;
		
		@ParameterConfigDoc(desc = "VM to suspend")
		public URI vm;
	}

	@Override
	public Class<?> getConfigurationClass()
	{
		return Config.class;
	}

	@Override
	public Void call() throws Exception
	{
		Host vm = (Host) IntUtils.uriToBasePojo(getConfig().vm);
		Start.getInstance().getHypervisorService().suspendVm(vm);
		return null;
	}
}
</source>

=== Registering the task ===

Tasks are listed in the file config/tasks.prop. An entry in the file has the following format:

<source>
org.example.ActionOnEvent=true
</source>

The registration can be done by either:

# calling the task manager API: <a href="/REST/JSON/getSemanticService/getTaskManager/">registerTaskClass</a>
# placing the file config/tasks.prop in the app
