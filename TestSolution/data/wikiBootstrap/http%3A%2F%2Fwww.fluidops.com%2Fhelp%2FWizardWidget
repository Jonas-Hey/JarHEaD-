=== Wizard Widget ===

==== Functionality ====
{{#widget: com.fluidops.iwb.widget.DisplayConfigurationWidget
| clazz = 'com.fluidops.iwb.widget.WizardWidget'
| type = 'DESCRIPTION'
}}

Each wizard step is defined as a wiki-page (i.e. identifiable by a URI) and will be rendered in-line. Widgets such as the [[Help:FormInputWidget]] or [[Help:TripleEditorWidget]] used in the individual wiki-steps operate on a so called wizard instance i.e. newly created data will be attached to the URI of the wizard instance. 
As such individual steps can compute or display auto suggestions depending on previous inputs. For validation and model modification the widget allows to invoke Java or Groovy methods on the NEXT and FINISH action. Exposed methods in Java or Groovy code must be annotated with the ''@CallableFromWidget'' annotation, e.g. 

<source>
@CallableFromWidget
public static String testMe(CodeExecutionContext ceCtx, Model model)
</source>

Groovy scripts must reside in the ''scripts'' folder of the current installation, where sub-directories correspond to the package structure.

The method expects expects exactly two arguments:
# <i>com.fluidops.iwb.service.CodeExecution.CodeExecutionContext</i> - holds some context information such as the current page context and the URI of the wizard instance
# <i>org.openrdf.model.Model </i> - contains all outgoing statements of the current wizard instance

Both arguments are automatically passed to the method during its invocation.

Steps can define so called ''skipConditions'' using SPARQL ASK queries (the special operator ?? can be used to reference the current wizard instance). If such a skip condition evaluates to ''true'', the respective step will be skipped.

<br/>
The wizard can operate in <b>two different modes</b> and depending on the
mode the URI of the wizard instance will be different:

===== Auto Mode (default) =====

In the default mode, the management of the temporary wizard instances is
based on the session and transparent to the end-user. For each user there
will be a separate wizard instance, however, one user cannot have several
instances of the same wizard at the same time. The user can leave and return
to the wizard at any time in any state.

After a wizard has been finished its state is final and cannot be changed any
more. A new instance will be created automatically e.g. when reloading the page. As such the
wizard behaves similar to a global cart in a webshop.

===== Manual Mode =====

To operate in the manual mode, one needs to provide a
''predefinedWizardInstanceURI'' as a configuration parameter. For
example, in the context of the self-service portal the wizard can be embedded
into the template page of a service with a
"''predefinedWizardInstanceURI=$this$''". As such a newly created
instance of a service will display the wizard and will operate directly on the
service instance. 
After a wizard has been finished its state is final and cannot be changed anymore. In contrast to the auto mode, reloading the page will not create a
new wizard instance. Instead, if no custom finish behavior is defined
(e.g. rendering a wiki-page), the wizard won't be visible any longer once it
has been finalized (an empty container is rendered).


==== Configuration Settings ====

{{#widget: com.fluidops.iwb.widget.DisplayConfigurationWidget
| clazz = 'com.fluidops.iwb.widget.WizardWidget'
}}

==== Cleanup Strategies ====

In many scenarios the wizard is used to collect temporary data as input for a workflow, i.e. the data is no longer needed once the workflow is executed with the wizard data as argument. In such cases it is desired that the collected data and the wizard metadata is cleaned up once the wizard is finished. A similar case is the cancel action: when cancelling a wizard temporary data should be deleted.

For this the wizard widget allows to configure a ''Cleanup Strategy''. The cleanup strategy defines the behavior when finishing or canceling a wizard.

The following out-of-box strategies are available:

* ''DeleteAllWizardDataCleanupStrategy'': deletes all outgoing statements attached to the wizard resource, i.e. wizard metadata and collected data.
* ''DeleteOnlyWizardMetaDataCleanupStrategy'': deletes all wizard metadata statements attached to the wizard resource.

Custom cleanup strategies can be configured by using the fully qualified classname of a class implementing the ''com.fluidops.iwb.widget.WizardWidget.CleanupStrategy'' interface.

Note that if no explicit cleanup strategy is applied the following default behavior is implemented:

* ''auto mode'': all outgoing statements of the wizard instance including the wizard metadata is deleted. 
* ''manual mode'': only wizard metadata is deleted, i.e. collected data cannot be deleted as it cannot be decided whether the wizard widget is the source of the statements


==== Example ====

This examples demonstrates the ''auto mode (default)''. The behaviour and configuration is quite similar to the ''manual mode''.

First we create a new wiki-page ''http://www.fluidops.com/test/wizardStep1'' for the first wizard step. On the page we embed a triple editor with one pre-defined property ''rdfs:label'', a pre-selection of values and some constraints.
<source>
{{#widget: TripleEditor | 
 width = '600'
 | startInEditMode = true
 | propertyConfiguration = {{ 
      {{ minCardinality = 1
       | values = $SELECT DISTINCT ?label WHERE{?a rdfs:label ?label}LIMIT 10$
       | showAlways = true
       | property = 'rdfs:label'
       | maxCardinality = 1
      }}}}
 | editMode = 'GROUPWISE'
}}
</source>

'''Note:''' instead of using full URIs it is possible to use short prefixed URIs (e.g., "myPage" corresponds to the default namespace, while "myPrefix:myPage" will be placed into the designated namespace.

For sake of demonstration, we leave the pages for the second and third wizard steps empty. Consequently, those pages will be rendered as empty steps.

Now we define the main wizard page (say "myWizard") where the actual wizard is embedded :

<source>
{{#widget: com.fluidops.iwb.widget.WizardWidget | 
 stepConfigurations = {{ 
      {{ stepWikiPageURI = 'http://www.fluidops.com/test/wizardStep1'
       | onNextMethod = 'com.fluidops.iwb.widget.WizardWidget.callableFromWizardExample'
       | stepTitle = 'Title 1'
      }} | 
      {{ stepWikiPageURI = 'wizardStep2InDefaultNamespace'
       | skipCondition = 'ASK {?? rdfs:label "skip"}'
       | stepTitle = 'Test Step 2'
      }} | 
      {{ stepWikiPageURI = 'Help:wizardStep3'
       | stepTitle = 'Title for Step 3'
      }} }}
 | finishActionConfiguration = 
   {{finishMethod = 'com.fluidops.iwb.widget.WizardWidget.callableFromWizardExample'
   }}
}}
</source>


In this example, we call a Java method ''com.fluidops.iwb.widget.WizardWidget.callableFromWizardExample'' on the NEXT action of the first step as well as on the FINISH action:

<source>
@CallableFromWidget
public static void callableFromWizardExample(CodeExecutionContext ceCtex, Model model){
	if (model.contains(null, RDFUtil.uri("rdfs:label"), RDFUtil.literal("exception")))
		throw new IllegalArgumentException("The value for rdfs:label is not valid.");
	if (model.contains(null, RDFUtil.uri("rdfs:label"), RDFUtil.literal("precompute")))
		model.add((URI) ceCtex.getContextValue(), RDFUtil.uri("rdfs:comment"), RDFUtil.literal("A precomputed comment."));
}
</source>

Since the model with all outgoing statements of the wizard will be passed automatically during invocation of the method, we can e.g. validate inputs, remove or even add new statements, which can be used in preceding steps.

Furthermore, the wizard defines a ''skipCondition'' for the transition from the first to the second step, which reads as follows: "If there is a property rdfs:label "skip" for the current wizard instance, the wizard will skip the second step and advance directly to step three.

==== Wizard input components ====

Certain components offer specialized behavior when embedded in a wizard. For example the [[Help:TripleEditor| triple editor]] or [[Help:FormInputWidget| form input widget]] do not show the save buttons as the ''save'' operation is implicitly invoked when navigating to the next wizard step.

The following listing summarizes the components that can be used inside the wizard steps:

* [[Help:FormInputWidget| form input widget]]: general purpose form input
* [[Help:TripleEditor| triple editor]]: specialized input form for RDF data
* SelectableTableResultWidget: a table result based form input with check boxes for selecting rows.

Example usage for ''SelectableTableResultWidget'':

<source>
{{#widget: com.fluidops.iwb.widget.wizard.SelectableTableResultWidget | 
 selectionConfig = 
   {{ variableName = 'class'
    | propertyName = ':selectedClass'
    | allowMultiSelection = false
   }}
 | noDataMessage = 'No classes in the system. For this test load an ontology'
 | numberOfDisplayedRows = 7
 | query = 'SELECT ?class ?comment WHERE { 
  ?class rdf:type owl:Class .
  OPTIONAL { ?class rdfs:comment ?comment }
}'
}}
</source>