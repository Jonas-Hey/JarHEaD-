== System Backup and Restore ==
The system state consists of

* User RDF data
* Imported data
* Configuration
* Wiki Edits
* Credentials (stored in the encrypted file secrets.xml)

While imported data can be re-obtained from the respective source, 
provider parameters, User Passwords and other information required for the individual instance are recorded in 
various files to be found in the installation folder. 
All of these customer specific configuration files should be backed up once the installation 
and configuration is completed, and whenever alterations/additions are made. 
By default, this is done automatically by the system service itself every 
hour (see next section).

===Automatic Backups=== 
Complete data backups are performed automatically at regular intervals by the system. 
The backup path, interval and number of backups to keep are specified with the 
configuration parameters "backupPath", "backupFrequencyInHours" and "numberOfBackupsToKeep". 
These default to a local disk folder "backup", by default parallel to the installation folder, 
once every hour, with a rolling window of 100 backups. The oldest backups are removed automatically 
once the number is arrived at. The backup path can be specified to use a mounted network 
share rather than the local disk. Note that the service owner/user must have write 
privileges on that target. Very large data centers can produce large backup files that 
may consume all available space on the disk. For this reason the backup folder/disk 
should be dimensioned accordingly, or the number of retained backups reduced accordingly. 
Note that the backups are of the data only, not the software installation.

The automatic backup is a folder named with a date and timestamp, containing zip files and 
all configuration files required to restore the object database, the rdf datastore and all 
instance-specific configuration parameters, providers and authentication data. The object 
database (which is in-memory at runtime) is saved to the file ''db-core.zip'', 
the rdf datastore, wiki pages and ontology are saved in the ''timestamp''_diagnosticfeedback.zip. 
These files collectively offer a consistent backup set from which the data can be restored 
to the time of the backup. Note that the in-memory DB is persisted at intervals of one 
minute in between the hourly backups (to /db/dbcore.zip.temp.#). If these files are 
still available after an incident, there is no loss of persisted data. However all of 
the data which has originated from providers will be reloaded at the next provider run 
if it is no longer in the database, therefore it is not critical to maintain the 
data in this database from backups.

===Manual Backups===
Manual backups of the system can be taken at any time using the CLI command 

<pre>backup</pre>

The semantic datastore can be backed up with the command 

<pre>getSemanticService getbackupService backupDBs</pre>

Each of these commands produces backups in the standard format in their respective locations (i.e. /backup/ ''timestamp''/dbcore.zip and /backup/ ''date-timestamp''/ ''date-timestamp''_diagnosticfeedback.zip).

This functionality is also available via the UI at [[Admin:Backup]].
The backup mechanism allows for saving the database at any time and restoring it when needed. You can save the history repository or the central database by selecting the type of backup. There is also an option to make a diagnostic feedback backup. The diagonstic backup will save the database, the history repository, wiki pages, config folder and the config.prop file. This can be kept for later use or downloaded for making a diagnose about the application.

=== The Backup Page ===
The Backup Database page is shown below.


<img src="../images/help/DatabaseBackup/dbPage.png" width="1200px" />


=== The Backing Up Process ===

The backup process is fairly straight forward.  

Step 1. The first step is to select the database which will be backed up from the menu, 

<br/>

<img src="../images/help/DatabaseBackup/selectDatabase.png" />
<br/>

as stated above there are two possible databases that can be backed up;

# dbmodel : the main database where imported and authored triples are stored.
# historymodel: database that stores the historical data that is created by the historical data provider.

We select dbmodel.

Step 2.  Click the 'Backup' button.  The backup of the database will now be available and can be used in future to restore the database to the current state or be downloaded as a .trig file.

<img src="../images/help/DatabaseBackup/AvailableBackups-populated.png" width="1100px" />

The same process can be completed for 'Full Backups' which save all data, pages and configuration of the {{PRODUCT}}.






=== Restoring Config from Backups ===
This section assumes that the server is still available as a running VM, either as the original
instance or as a clone copy of it. It must have the same version of the software installed and the 
same disk layout and capacity available as the backed-up productive instance. 
This is most easily achieved by cloning the server once setup and configuration is initially completed. 
The clone can be maintained as a redundant offline copy. 

In the event of a file system failure, database corruption or other loss of service, 
it is possible to restore the last known good backup to the server - or to any copy or clone 
of it using the same software version. 

Assuming the software is undamaged on the file system, the latest backup can be restored simply 
by stopping the service (if it is running) and copying the files contained in the 
backup folder back to their original locations: dbcore.zip, agents.xml and extraData.xml to 
/db (these files are relevant for eCloudManager only), all other *.xml, *.prop, *.conf files to the installation 
folder (if they are no longer there) 
and the config and data folders with contents from the diagnosticfeedback.zip to the installation folder. 
If copies of these files already exist in these locations and are newer, but do not originate 
from a freshly installed system, then keep the newer files (unless they are corrupt/unreadable), 
as they may have newer contents than the backed-up files.

After starting the service, all providers will be run automatically. 
Navigate to the https:// ''hostname-or-IP:port''/resource/Setup:Upgrade page and scroll 
down to access the two buttons "Recreate Wiki Index" and "Recreate keyword Index" - execute both 
functions by clicking on the buttons. This will remove any inconsistencies in the indices, 
which may otherwise prevent some pages referencing each other properly. 

In the event of the RDF datastore becoming corrupt, it is possible to re-import the triples and 
ontologies from the backup. Do not perform this step unless explicitly requested to by fluid 
Operations support. Extract the files "dbmodel.trig" and "historymodel.trig" from the latest 
backup/ ''timestamp''_diagnosticfeedback.zip from the ./backup/data/ folder. Start the  
service, navigate to the Admin:Import wiki page, then import the two files into the datastore using 
the RDF Data Import Widget. Tick the "use source context as target context" button in the advanced section, then 
select the TriG RDF Data Type and give the path to the file. Click on the "Import RDF Data" button to finish. 
Import first the dbmodel.trig then the historymodel.trig. Afterwards it may be necessary to 
rebuild the indices using the recreate keyword index and recreate wiki index buttons on the Setup:Upgrade wiki page. 
Alternatively, the restore can be done using the fluidOps diag tool. Contact fluidOps support for more details.

If user-created Wiki pages are missing after the restore, check that all of the user wiki 
pages contained in the backup (backup/ ''timestamp''_diagnosticfeedback.zip in the ./backup/wiki folder) 
are present in the data/wiki folder. If not, copy the extracted wiki folder 
to the data/wiki folder overwriting any existing files. Alternatively you can rename 
the extracted wiki folder to 'wikibootstrap', copy it to the data folder and restart the service. 
The user-generated and altered wiki files will be merged into the standard wiki pages in data/wiki. 
 
====Transferring User-modified Wiki pages to another instance====
In order to transfer user-modified Wiki pages from one instance to another, 
navigate to the https:// ''hostname-or-IP:port''/resource/Admin:WikiManagement page, 
click the button "Show user pages only" to select all user-changed or created pages, then the "Select all" 
and then the "Export" button to create a zip file "wikiBootstrap ''number''.zip" containing all the 
wiki pages which have been altered from the bootstrap (i.e. standard) versions. This file can then 
be imported to another instance by unpacking the zip file in the installation directory and then 
restarting the service. 

