== Operations Console ==
The best way to access operations and information regarding installations of {{PRODUCT}} is to use the Operations Console. This application connects to a single or even multiple {{PRODUCT}} installations in parallel either via [https://en.wikipedia.org/wiki/Java_remote_method_invocation RMI] or local file access. The console provides a graphical interface for data visualization and is easily extendable using the [https://en.wikipedia.org/wiki/Groovy_(programming_language) Groovy] programming language. Some extensions are already shipped with the platform, [https://appcenter.fluidops.com/resource/AppCenter apps] might also offer additional extensions.

The Operations Console can be run by executing ''operationsConsole.cmd'' (Windows) or ''operationsConsole.sh'' (Unix) in the '''tools''' folder of your {{PRODUCT}} installation directory or as a shortcut in the start menu (only Windows installations). 

=== Locations ===
As already mentioned, the Operations Console can open different locations in parallel.
To open one of these locations, open the '''File''' menu and select the desired option. 
<p>
<img src="../images/help/operationsConsole/oc_menu_01.png" />
</p>

==== Local Directory ====
This points to the root folder of a {{PRODUCT}} installation on the local file system or a file system mapped to a local drive. The current installation (where the console has been started from) is used as the default location.

==== Remote Location ====
A remote location is a running instance of {{PRODUCT}}, which needs to be accessible via [https://en.wikipedia.org/wiki/Java_remote_method_invocation RMI] (default port ''60501''). Whenever a remote location is connected a connection dialog is shown, where ''username'', ''password'', ''connection type'', ''remote host'' and an optional ''custom port'' have to be entered.
<p>
<img src="../images/help/operationsConsole/oc_remote_01.png" />
</p>
By clicking on ''Ok'' the connection is established, otherwise an error is shown in the textbox at the bottom.

==== Diagnostic Archive ====
For offline diagnostics, {{PRODUCT}} is able to create a diagnostic archive, which is a snapshot of the system at the time the archive is created. This archive can then be opened in the Operation Console, where contained log and configuration files can be examined.

=== Basic Data visualization ===
Access to basic data visualization is only available for local installations and opened diagnostic archives.

==== Log file access ====
In the left lane, log files are listed in their own section '''Logs'''. For each type of logfile, there is a subfolder.
<p>
<img src="../images/help/operationsConsole/oc_log_01.png" />
</p>
When opened, the content pane on the right side shows the log entries corresponding to the selected file with the possibility to:
* tail (follow new entries)
* refresh (read the file again)
* scroll to top/bottom
* turn on/off highlighting
<p>
<img src="../images/help/operationsConsole/oc_log_02.png" />
</p>

==== Configuration file access ====
In the left lane, configuration files are listed in their own section '''Configuration'''. For each configuration type (i.e. ''*.xml'', ''*.prop'',...) there is a subfolder, which contains the corresponding files.
<p>
<img src="../images/help/operationsConsole/oc_config_01.png" />
</p>
When opened, the panel on the right side shows the content corresponding to the selected file either in textual form or if possible in a table as key-value pairs.

=== Extensions ===
The Operation Console comes with several extensions already included but writing your own extensions (see below) is quiet easy. Extensions are grouped by category.
<p>
<img src="../images/help/operationsConsole/oc_extensions.png" />
</p>

==== Groovy Console ====
The most basic extension is the groovy console. This is basically just a text field where groovy code can be written in. This code can then directly be executed. All other extensions are based on this console and it can be shown or hidden using the small arrows (4). When the groovy console is called on its own, it uses the {{PRODUCT}} API and a connection dialog is shown (see ''Remote Location''). User and location are shown in a tab for each started groovy console (1). A menu and statusbar (2) offer some quick tools for cutting, pasting, searching of text and code execution. The textarea below (3) is the code editor and the panel below (5) shows the result when your code is executed. Be aware, that code entered in the groovy console is not persisted unless it is saved in a file.
<p>
<img src="../images/help/operationsConsole/oc_groovy_console.png" />
</p>

==== Out-of-the-box extensions ====
* Operations
** Service info
*: Shows infos about a running {{PRODUCT}} instance (i.e. version, starttime, uptime,...)
** Jobs
*: Shows all jobs (and their details) in a table
** Log levels
*: For each logger, the log level can be adjusted. These changes only remain until the service is restarted.
** Queue statistics
*: Shows details about queues on specific methods
** Service control
*: Restart or stop the service of the installation the console is currently connected to
* High availability
*: Tools for cluster monitoring and analyzation
* Debug
*: Tools for off- and online debugging. The ''Debug Options'' extension allows to enable the development mode of {{PRODUCT}}, which enables experimental features and should not be used in a productive environment as well as the recording of performance metrics, that can later be analyzed by the ''Performance Analyzer'' extension.
* API help
*: Shows all details of the API (method headers, parameters and their description)

==== Writing own extensions ====
For custom extensions you just have to place a groovy file in
<pre>diag/extensions/scripts</pre>
relative to your {{PRODUCT}} root folder. When you put a 16 x 16 pixels *.gif image next to your script with the same name, your extension will appear with your custom icon in the list of extensions. To configure and register your extension properly you have to implement certain methods:
<source>
// Name of extension
def getName() {
    "My Extension"
}

// Description of extension
def getDescription() {
    "My first extension"
}

// Category of extension
def getCategory() {
    "Operations" // or "Debug"
}
</source>

The way the result is shown, depends on the type of the object returned by your script. The following types are visualized automatically:
* Map
* List
* ObjectTableModel or TableModel
* HTML text
* Icon or Image

===== Example =====
<source>
// Name of extension
def getName() {
    "Example Extension"
}

// Description of extension
def getDescription() {
    "An example on how to visualize a result"
}

// Category of extension
def getCategory() {
    "Custom"
}

def resultList = [:]

(1..100).each { resultList[it] = it }

resultList
</source>