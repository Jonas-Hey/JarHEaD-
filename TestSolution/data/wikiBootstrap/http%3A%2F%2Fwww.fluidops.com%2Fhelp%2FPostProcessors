== Post Processors ==

Post Processors are a means for modifying the output of a [[Help:Providers| data provider]] run, e.g. as part of the [[Help:DataOpsPostProcessing| three step data integration process]].

Use cases include the alignment of data belonging to the same resource or entity reconciliation (i.e., linking or connecting resources that reference the same entity). Also modifications on the gathered data can be made that are for instance hard to do achieve with R2RML mappings (e.g. providing literal language tags).

The platform ships with a few default post processors (e.g., a SILK Post processor for entity reconciliation). Please find the list of available post processors [[Help:TOC#Help:PostProcessors_Post_Processors| here]].

=== Post Processor Extensions ===

Post-Processors are designed with extensibility in mind allowing to provide custom functionality. This is handy when complex data manipulation needs to be done which is hard to express declaratively.

# implement the post processor as an instance of ''com.fluidops.iwb.provider.PostProcessor''
# register the post processor in ''META-INF/services/com.fluidops.iwb.provider.PostProcessor'' using the Java SPI mechanism

Example post processor:

<source>
public class DemoPostProcessor implements PostProcessor {

	@ParameterConfigDoc(desc="This is an example configuration setting.", type = Type.SIMPLE)
	public String myConfig;
	
	@Override
	public Model postProcess(Model input) throws Exception {
		
		TreeModel finalModel = new TreeModel();
		
		for (Statement st : input) {
			// do some post processing here, e.g. normalization for certain object values
			// once done, add to finalModel
			Statement modifiedSt = ...
			finalModel.add(modifiedSt);
		}
		
		return finalModel;
	}
}
</source>
