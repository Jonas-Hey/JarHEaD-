==Query Catalog==
SPARQL queries can be stored as first class objects using the [[sp:Query|query catalog]]. This capability can be used to build, for example, a dedicated catalog of domain specific business logic, which can be reused in multiple places i.e., within all query-based [[Help:Widgets|widgets]], for dynamic [[Help:AdvancedWidgetConfiguration#Dynamic_Operators|operators]] or within providers.

=== SPIN ===
The [http://spinrdf.org SPIN] vocabulary is being used for representing query objects. Since SPIN comes already with an RDF based representation, query objects are being stored as a set of triples.

The basic structure of a SPIN template in [http://www.w3.org/TR/turtle/ turtle notation] using blank nodes to highlight the structure looks as follows: 
<source>
:template a spin:Template;
	  spin:constraint  [	a	      spl:Argument;
			        spl:predicate :o .
		           ];
	  spin:body        [    a 	      sp:Query;
		                sp:text       "Select * WHERE {?a ?b ?c}".
		           ].
</source>

==== Query Template vs. Base Query ====

In SPIN there is a basic distinction between templates and queries. ''Query templates'' can be parameterized with ''arguments'', whereas ''base queries'' contain solely the plain SPARQL query. 

To summarize:
* ''query templates'' MUST have exactly one references to a ''base query''
* ''query templates'' MAY have one or multiple references to ''arguments'' (constraint)
* a ''base query'' can be referenced by one or multiple ''query templates''

Please note that within {{PRODUCT}} only query templates should be executed and referenced i.e. '''it is not recommended to reference plain queries''', since plain queries contain usually many unbound variables and can be quite expensive to execute.

==== Conventions ====
To be treated as a first class query object by the back-end, it must meet the following conditions:
* the ''base query'' MUST be typed at least with the SPIN superclass '''sp:Query''' and MUST have a property '''sp:text''' (storing the plain query string). 
* the executable ''query template'' MUST be typed at least with the SPIN superclass '''spin:Template''' and MUST have a property '''spin:body''' referencing the base query.
* the ''template arguments'' MUST be typed at least with the SPIN superclass '''spin:Argument''' and MUST have a property '''spl:predicate'''. The local name of the URI referenced by the '''spl:predicate''' determines the variable to be bound within the query.

In the spirit of linked data, the SPIN vocabulary can be mixed with other vocabularies e.g. by adding comments or domain specific categorization using vocabularies such as SKOS.

==== SPIN Example ====
The following [http://www.w3.org/TR/turtle/ turtle code] exemplifies a complete SPIN query including an executable query template, an optional template argument as well as the the base query:
<source>
@prefix spl: <http://spinrdf.org/spl#> .
@prefix sp: <http://spinrdf.org/sp#>.
@prefix spin: <http://spinrdf.org/spin#>.
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#>.
@prefix fsp: <http://www.fluidops.com/ontologies/spin/>.
@prefix : <http://www.fluidops.com/resource/>.

# executable query template
:queryTemplate1 a spin:SelectTemplate, spin:Template ;
		rdfs:label "Select instances of a class."^^xsd:string ;
		rdfs:comment "Some long natural language description for the query. 
			      This query selects all instances of all classes (default) of - if the
			      argument is provided - of the specified class."^^xsd:string ;
		spin:body :baseQuery1 ;
		spin:constraint :arg1 ;
		spin:labelTemplate "Human readable template label with {?arg1} property parameterized."^^xsd:string ;
		fsp:useDefaultRepository "true"^^xsd:boolean.

# parameter (argument) definition for the template
:arg1 a spl:Argument ;
		rdfs:label "Class Parameter"^^xsd:string ;
		rdfs:comment "This argument is to constraint the class of instances to select."^^xsd:string ;
		spl:optional "true"^^xsd:boolean ;
		spl:predicate :o ;
		spl:valueType <http://www.w3.org/2002/07/owl#Class>  ;
		spl:defaultValue <http://www.w3.org/2002/07/owl#Class> ;
		fsp:displayOrder "1"^^xsd:string .


# base query body
:baseQuery1 a sp:Query, sp:Select;
		rdfs:label "Select all instances."^^xsd:string ;
		sp:text "SELECT ?s WHERE {?s a ?o} LIMIT 10" .
</source>

The example above can be imported or bootstrapped by a solution to provide the required domain or application specific logic. The advantage is that the business logic is physically separated from the result visualization (i.e. widgets) and can be tested through, for example, JUnit tests.

=== Query Reference and Identifier ===
Once created, a query object can be referenced within wiki-pages by all query-based widgets, operators and providers using the '''Query:''' protocol identifier plus the full or abbreviated query URI.

Examples:
* Query:SelectQueryExample ''(query in default namespace)''
* Query:http://www.fluidops.com/SelectQueryExample ''(query with full URI)''
* Query:prefix:SelectQueryExample ''(query with prefixed URI)''

To reference a query, for example, within a widget configuration one needs to provide the query reference instead of the plain SPARQL query.

Example for a plain query reference from within the table result widget:
<source>
{{#widget: TableResult 
 | query = 'Query:queryTemplate1'
}}
</source>

Queries can also be parameterized from within the wiki context. Parameters can be provided either statically or through [[Help:AdvancedWidgetConfiguration | dynamic operators]].

Example for a parameterized query reference from within the table result widget:
<source>
{{#widget: TableResult 
 | query = 'Query:queryTemplate1'
 | queryParameters = {{ 
      {{ name = 'o'
       | value = 'foaf:Person'
      }} }}
}}
</source>

=== Query validation ===

Prior to executing a query from the catalog it is validated for consistency (e.g., whether values are provided for all required query arguments). {{PRODUCT}} in addition falls back to ''default values'' for query arguments according to the following table (which may be handy when using dynamic [[Help:AdvancedWidgetConfiguration | dynamic operators]] such as ''$''this.myParamValue$).


{| class="wikitable"
|-
! Query Parameter Provided
! Required
! Has Default
! Result
|-
| yes
| ignored
| ignored
| provided value bound in query
|-
| no
| yes
| yes
| default value bound in query
|-
| no
| yes
| no
| error
|-
| no
| no
| yes
| default value bound in query
|-
| no
| no
| no
| parameter is unbound in query
|}

'''Note:''' if a ''null'' value is provided for a query parameter that is not defined as constraint for the query, a validation error  is shown.