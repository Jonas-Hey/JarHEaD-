package de.semanticservices.praktikum.JarHEaD;

import org.openrdf.model.URI;
import org.openrdf.query.QueryEvaluationException;

import com.fluidops.iwb.annotation.CallableFromWidget;

public class Util {

	/**
	 * 	Takes two Gemeinden and calculates the distance between them
	 * @param URI of Gemeinde
	 * @param URI of Gemeinde
	 * @return Double of the distance in Km
	 * @throws QueryEvaluationException 
	 */
	@CallableFromWidget
	public static double distanceDouble(URI left,URI right) throws QueryEvaluationException{
		/*left=Längen-, right=Breitengrad
		 * berechne Abstand zwischen links und rechts/längen und
		 * schreibe den Abstand in die Datenbank (DataProvider)
		 * gebe String zurück"Der abstand ist : XXX Km"
		*/		
		//String SPARQL="Select ?x ?y where{<"+left.toString()+"> :Länge ?x.<"+left.toString()+"> :Breite ?y}";
		//String SPARQL="Select ?x ?y where{<http://www.fluidops.com/resource/test> :Länge ?x.<http://www.fluidops.com/resource/test> :Breite ?y}";
		//String SPARQL="Select ?x ?y where{?? :längengrad ?x.?? :breitengrad ?y}";
				
		
		String SPARQL="Select ?längengrad ?breitengrad where {?? "+test2.länge+" ?längengrad.?? "+test2.breite+" ?breitengrad}";
		
		if(test2.debug)System.out.println(SPARQL);
		if(test2.debug)System.out.println(left+" >-< "+right);
		
		
		String[] l =test2.query(right, SPARQL,"längengrad","breitengrad");
		String rechtsLänge=null;
		String rechtsBreite=null;
		String linksLänge=null;
		String linksBreite=null;
				
		if (l[0]!=null&&l[1]!=null&&!(l[1].isEmpty())&&!l[0].isEmpty()&&!l[0].equals("0")&&!l[1].equals("0")){
			if(test2.debug)System.out.println("Ausgabe von l: "+l);
		rechtsBreite=test2.literalToString(l[1]);
		rechtsLänge=test2.literalToString(l[0]);
		}
		
		if (test2.debug)System.out.println(rechtsLänge+" c "+rechtsBreite);
		
		l =test2.query(left, SPARQL,"längengrad","breitengrad");
		
		if (l[0]!=null&&l[1]!=null&&!(l[1].isEmpty())&&!l[0].isEmpty()&&!l[0].equals("0")&&!l[1].equals("0")){
			if(test2.debug)System.out.println("Ausgabe von l: "+l);
		linksBreite=test2.literalToString(l[1]);
		linksLänge=test2.literalToString(l[0]);}//kann sein, dass nichts oder mehr als eins zurück gegeben wird
		
		
		if (test2.debug)System.out.println(linksLänge+" O "+linksBreite);
		
			
		if(rechtsLänge==null||rechtsBreite==null||linksLänge==null||linksBreite==null){
			String name = new Object(){}.getClass().getEnclosingMethod().getName();
			if (test2.debug)System.err.println("Error: String is empty"+name);
			if (test2.debug)System.err.println(SPARQL);
			return -1;
			
		}		
		if(rechtsLänge.equals("0")||rechtsBreite.equals("0")||linksLänge.equals("0")||linksBreite.equals("0")){
			if (test2.debug)System.err.println("Error:One or more Coordinates are 0");
			if (test2.debug)System.err.println(SPARQL);
			return -1;
			
		}
		
		return test2.berechneDistance(test2.stringToDouble(rechtsLänge),test2.stringToDouble(rechtsBreite),test2.stringToDouble(linksLänge),test2.stringToDouble(linksBreite));
		
	}

}
